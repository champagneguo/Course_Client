package com.course.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.course.greendao.COURSE;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COURSE.
*/
public class COURSEDao extends AbstractDao<COURSE, Long> {

    public static final String TABLENAME = "COURSE";

    /**
     * Properties of entity COURSE.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Coursenumber = new Property(1, String.class, "coursenumber", false, "COURSENUMBER");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Category = new Property(3, String.class, "category", false, "CATEGORY");
        public final static Property Teacher = new Property(4, String.class, "teacher", false, "TEACHER");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
        public final static Property Price = new Property(6, Float.class, "price", false, "PRICE");
        public final static Property Details = new Property(7, String.class, "details", false, "DETAILS");
        public final static Property Remark = new Property(8, String.class, "remark", false, "REMARK");
        public final static Property Photo = new Property(9, byte[].class, "photo", false, "PHOTO");
    };


    public COURSEDao(DaoConfig config) {
        super(config);
    }
    
    public COURSEDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COURSE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'COURSENUMBER' TEXT," + // 1: coursenumber
                "'NAME' TEXT," + // 2: name
                "'CATEGORY' TEXT," + // 3: category
                "'TEACHER' TEXT," + // 4: teacher
                "'TIME' TEXT," + // 5: time
                "'PRICE' REAL," + // 6: price
                "'DETAILS' TEXT," + // 7: details
                "'REMARK' TEXT," + // 8: remark
                "'PHOTO' BLOB);"); // 9: photo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COURSE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, COURSE entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String coursenumber = entity.getCoursenumber();
        if (coursenumber != null) {
            stmt.bindString(2, coursenumber);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(4, category);
        }
 
        String teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindString(5, teacher);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        Float price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(7, price);
        }
 
        String details = entity.getDetails();
        if (details != null) {
            stmt.bindString(8, details);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(9, remark);
        }
 
        byte[] photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindBlob(10, photo);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public COURSE readEntity(Cursor cursor, int offset) {
        COURSE entity = new COURSE( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // coursenumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // category
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // teacher
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // price
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // details
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // remark
            cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9) // photo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, COURSE entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCoursenumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategory(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTeacher(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrice(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setDetails(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRemark(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhoto(cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(COURSE entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(COURSE entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
